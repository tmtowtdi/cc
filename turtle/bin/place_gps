
-- Search on CHECK

--place_gps TuerqNSi

os.loadAPI("lib/inv")
os.loadAPI("lib/move")

local args   = {...}
local height = args[1] or 140

--[[
  Assumes you've just placed a computer, which is in front of you.
  Places a modem on the machine's left, and a disk drive on its right, 
  then inserts a disk into the drive, and creates a startup file on 
  the disk.
  Turtle ends up back at its starting position
  CHECK totally untested.
--]]
function set_peripherals(coords_vec)
  move.strafe_l()
  turtle.select( inv.find_ccper_slot("modem") )
  turtle.place()
  move.strafe_r(2)
  turtle.select( inv.find_ccper_slot("drive") )
  turtle.place()
  turtle.select( inv.find("ComputerCraft:disk") )

  -- CHECK does this put the disk in the drive?  Should but untested.
  turtle.place()  

  -- CHECK I'm assuming we're adjacent to the drive we just placed so we 
  -- should be able to access it.
  write_startup_file("disk/startup", coords_vec)

  move.strafe_l()
end

function place_gps()
  -- Bottom row east
  move.face_e()
  move.fd(3)
  bot_e = vector.new( gps.locate(2) )
  move.bk()
  turtle.select( inv.find("ComputerCraft:CC-Computer") )
  turtle.place()
  set_peripherals(bot_e)

  -- Bottom row west
  move.a()
  move.fd(5)
  bot_w = vector.new( gps.locate(2) )
  move.bk()
  turtle.select( inv.find("ComputerCraft:CC-Computer") )
  turtle.place()
  set_peripherals(bot_w)

  turtle.bk(2)    -- Back to center
  turtle.up(3)    -- Up to top row

  -- Top row north
  move.r()
  move.fd(3)
  top_n = vector.new( gps.locate(2) )
  move.bk()
  turtle.select( inv.find("ComputerCraft:CC-Computer") )
  turtle.place()
  set_peripherals(top_n)

  -- Top row south
  move.a()
  move.fd(5)
  top_s = vector.new( gps.locate(2) )
  move.bk()
  turtle.select( inv.find("ComputerCraft:CC-Computer") )
  turtle.place()
  set_peripherals(top_s)

  move.bk(2)    -- Back to center
  return true
end

function check_inv()
  print("check_inv doesn't actually do anything yet.")
  return true

  -- Computers
  local comp_num   = 0
  local comp_slots = inv.find_all('ComputerCraft:CC-Computer')
  for k,slot in ipairs(comp_slots) do
    comp_num = comp_num + turtle.getItemCount( slot )
    if comp_num >= 4 then break end
  end
  if comp_num < 4 then error("Not enough computers in inv.") return false end

  -- Floppies (they don't stack)
  local disk_slots = inv.find_all('ComputerCraft:disk')
  if #disk_slots < 4 then error("Not enough floppy disks in inv.") return false end

  -- Drives and modems
  local drive_num   = 0
  local modem_num   = 0
  local per_slots = inv.find_all('ComputerCraft:CC-Peripheral')
  for k,slot in ipairs(per_slots) do
    local cnt = turtle.getItemCount( slot )
    d = turtle.getItemDetail(slot)
    if d.damage == 0 then drive_num = drive_num + cnt
      elseif d.damage == 1 then modem_num = modem_num + cnt
    end
  end
  if drive_num < 4 then error("Not enough disk drives in inv.") return false end
  if modem_num < 4 then error("Not enough modems in inv.") return false end

  return true
end



function write_startup_file(fname, vec)
    local h = fs.open(fname, 'w')
    h.writeLine( "shell.run( \"gps\", \"host\", vec.x, vec.y, vec.z )" )
    h.close()
    return true;
end





if not check_inv() then
  error("We can't build the GPS without the ingredients.")
  return
end
print("Inventory checks out.")

s = vector.new( gps.locate(2) )
print("Got starting location.")

move.up( height)
print("At height, starting to build GPS.")
place_gps()

print("Returning home again.")
move.goto(s.x, s.y, s.z)    -- fly back down to start

print("---------------------------------------")
print("Your new GPS system is in place.  Fly")
print("up to it, and, on all four computers,")
print("type this:")
print("   > copy disk/startup .")
print("   > startup")
print("...and your GPS system will be on.")
print("---------------------------------------")


 -- vim: syntax=lua ts=2 sw=2
