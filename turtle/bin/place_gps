
-- Search on CHECK

--place_gps TuerqNSi 1478125391 TuerqNSi 1478124649 TuerqNSi 1478124440 TuerqNSi 1478122223 TuerqNSi 1478121414 TuerqNSi 1478120858 TuerqNSi

os.loadAPI("lib/inv")

local args    = {...}
local height  = args[1] or 140
local has_gps = false

function strafe_r(num) 
 num = num or 1
 turtle.turnRight()
 for i=1,num do turtle.forward() end
 turtle.turnLeft()
end

function strafe_l(num) 
 num = num or 1
 turtle.turnLeft()
 for i=1,num do turtle.forward() end
 turtle.turnRight()
end

--[[
  Assumes you've just placed a computer, which is in front of you.
  Places a modem on the machine's left, and a disk drive on its right, 
  then inserts a disk into the drive, and creates a startup file on 
  the disk.
  Turtle ends up back at its starting position
  CHECK totally untested.
--]]
function set_peripherals(coords_vec)
  strafe_l(2)
  turtle.forward()
  turtle.turnRight()
  turtle.select( inv.find_ccper_slot("modem") )
  turtle.place()
  turtle.turnLeft()
  turtle.back()
  strafe_r(3)
  turtle.select( inv.find_ccper_slot("drive") )
  turtle.place()
  turtle.select( inv.find("ComputerCraft:disk") )

  -- CHECK does this put the disk in the drive?  Should but untested.
  turtle.place()  

  -- CHECK I'm assuming we're adjacent to the drive we just placed so we 
  -- should be able to access it.
  write_startup_file("disk/startup", coords_vec)

  strafe_l()
end

function place_gps()
  local bot_e, bot_w, top_n, top_s

  -- Bottom row 1
  for i = 1,3 do turtle.forward() end
  if has_gps then bot_e = vector.new( gps.locate(2) ) end
  turtle.back()
  turtle.select( inv.find("ComputerCraft:CC-Computer") )
  turtle.place()
  if bot_e then set_peripherals(bot_e) end

  -- Bottom row 2
  for i = 1,2 do turtle.turnRight() end
  for i = 1,5 do turtle.forward() end
  if has_gps then bot_w = vector.new( gps.locate(2) ) end
  turtle.back()
  turtle.select( inv.find("ComputerCraft:CC-Computer") )
  turtle.place()
  if bot_w then set_peripherals(bot_w) end

  for i=1,2 do turtle.back() end    -- Back to center
  for i=1,3 do turtle.up() end      -- Up to top row

  -- Top row 1
  turtle.turnRight()
  for i = 1,3 do turtle.forward() end
  if has_gps then top_n = vector.new( gps.locate(2) ) end
  turtle.back()
  turtle.select( inv.find("ComputerCraft:CC-Computer") )
  turtle.place()
  if top_n then set_peripherals(top_n) end

  -- Top row 2
  for i = 1,2 do turtle.turnRight() end
  for i = 1,5 do turtle.forward() end
  if has_gps then top_s = vector.new( gps.locate(2) ) end
  turtle.back()
  turtle.select( inv.find("ComputerCraft:CC-Computer") )
  turtle.place()
  if top_s then set_peripherals(top_s) end

  for i = 1,2 do turtle.back() end  -- Back to center
  for i=1,3 do turtle.down() end    -- Back to start point
  return true
end

function check_inv()
  -- Computers
  local comp_num   = 0
  local comp_slots = inv.find_all('ComputerCraft:CC-Computer')
  for k,slot in ipairs(comp_slots) do
    comp_num = comp_num + turtle.getItemCount( slot )
    if comp_num >= 4 then break end
  end
  if comp_num < 4 then error("Not enough computers in inv.") return false end

  -- Floppies (they don't stack)
  if has_gps then
    local disk_slots = inv.find_all('ComputerCraft:disk')
    if #disk_slots < 4 then error("Not enough floppy disks in inv.") return false end
  end

  -- Drives and modems
  local drive_num   = 0
  local modem_num   = 0
  local per_slots = inv.find_all('ComputerCraft:CC-Peripheral')
  for k,slot in ipairs(per_slots) do
    local cnt = turtle.getItemCount( slot )
    local d   = turtle.getItemDetail(slot)
    if inv.isa_ccdrive(d) then drive_num = drive_num + cnt
      elseif inv.isa_ccmodem(d) then modem_num = modem_num + cnt
    end
  end
  if has_gps then
    if drive_num < 4 then error("Not enough disk drives in inv.") return false end
  end
  if modem_num < 4 then error("Not enough modems in inv.") return false end

  return true
end

function write_startup_file(fname, vec)
    local h = fs.open(fname, 'w')
    h.writeLine( "shell.run( \"gps\", \"host\", vec.x, vec.y, vec.z )" )
    h.close()
    return true;
end




-- Main
local x,y,z = gps.locate(2) 
if x and y and z then
  print("We're in range of a GPS system.")
  has_gps = true
else
  print("We're not in range of a GPS system.")
end

if not check_inv() then
  error("We can't build the GPS without the ingredients.")
  return
end
print("Inventory checks out.")

for i=1,height do turtle.up() end
print("At height, starting to build GPS.")
place_gps()

print("Returning home again.")
for i=1,height do turtle.down() end   -- fly back down to start


--[[
print("---------------------------------------")
if has_gps then
  print("Your new GPS system is in place.  Fly")
  print("up to it, and, on all four computers,")
  print("type this:")
  print("   > copy disk/startup .")
  print("   > startup")
  print("...and your GPS system will be on.")
  print("")
  print("If you like, you can take down the disk")
  print("drives (and disks) after copying the") 
  print("startup files off of them.")
else
  print("Your new GPS system is in place.  Fly")
  print("up to it and then, for each of the ")
  print("four machines, figure out its X, Y, Z")
  print("coordinates.  Then type this:")
  print("   > pastebin get DkS2Evw3 startup")
  print("")
  print("Next, edit that startup script; enter")
  print("the machine's coordinates and save")
  print("the script.")
  print("")
  print("Last, run each machine's startup")
  print("script, and your GPS system will")
  print("be on.")
end
print("---------------------------------------")
--]]


 -- vim: syntax=lua ts=2 sw=2
