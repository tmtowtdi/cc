
--place_gps TuerqNSi 1478204554

local rv = shell.run("turn", "left")
if rv then
  shell.run("turn", "right")
else
  error("This device is not a turtle.")
  return false
end

if not os.loadAPI("lib/inv") then return end

local args   = {...}
function die_usage()
  print("---------------------------------------")
  print("bin/place_gps [height]")
  print("")
  print("Set up a GPS system.")
  print("")
  print("height - how high to fly up first.")
  print("  Defaults to 140.")
  print("---------------------------------------")
end
if args[1] == "-h" then
    die_usage()
    return
end

local height  = args[1] or 140
local has_gps = false

function strafe_r(num) 
 num = num or 1
 turtle.turnRight()
 for i=1,num do turtle.forward() end
 turtle.turnLeft()
end

function strafe_l(num) 
 num = num or 1
 turtle.turnLeft()
 for i=1,num do turtle.forward() end
 turtle.turnRight()
end

function set_peripherals(coords_vec)
  strafe_l(2)
  turtle.forward()
  turtle.turnRight()
  turtle.select( inv.find_ccper_slot("modem") )
  turtle.place()
  turtle.turnLeft()
  turtle.back()
  strafe_r(2)
  if has_gps then
    strafe_r()
    turtle.select( inv.find_ccper_slot("drive") )
    turtle.place()
    turtle.select( inv.find("ComputerCraft:disk") )
    turtle.drop()  
    write_startup_file("disk/startup", coords_vec)
    strafe_l()
  end
end

function place_gps()
  local bot_e, bot_w, top_n, top_s

  -- Bottom row 1
  for i = 1,3 do turtle.forward() end
  local bot_e = vector.new()
  if has_gps then bot_e = vector.new( gps.locate(2) ) end
  turtle.back()
  turtle.select( inv.find("ComputerCraft:CC-Computer") )
  turtle.place()
  set_peripherals(bot_e)

  -- Bottom row 2
  for i = 1,2 do turtle.turnRight() end
  for i = 1,5 do turtle.forward() end
  local bot_w = vector.new()
  if has_gps then bot_w = vector.new( gps.locate(2) ) end
  turtle.back()
  turtle.select( inv.find("ComputerCraft:CC-Computer") )
  turtle.place()
  set_peripherals(bot_w)

  for i=1,2 do turtle.back() end    -- Back to center
  for i=1,3 do turtle.up() end      -- Up to top row

  -- Top row 1
  turtle.turnRight()
  for i = 1,3 do turtle.forward() end
  local bot_n = vector.new()
  if has_gps then top_n = vector.new( gps.locate(2) ) end
  turtle.back()
  turtle.select( inv.find("ComputerCraft:CC-Computer") )
  turtle.place()
  set_peripherals(bot_n)

  -- Top row 2
  for i = 1,2 do turtle.turnRight() end
  for i = 1,5 do turtle.forward() end
  local bot_s = vector.new()
  if has_gps then top_s = vector.new( gps.locate(2) ) end
  turtle.back()
  turtle.select( inv.find("ComputerCraft:CC-Computer") )
  turtle.place()
  set_peripherals(bot_s)

  for i = 1,2 do turtle.back() end  -- Back to center
  for i=1,3 do turtle.down() end    -- Back to start point
  return true
end

function check_inv()
  -- Computers
  local comp_num   = 0
  local comp_slots = inv.find_all('ComputerCraft:CC-Computer')
  for k,slot in ipairs(comp_slots) do
    comp_num = comp_num + turtle.getItemCount( slot )
    if comp_num >= 4 then break end
  end
  if comp_num < 4 then error("Not enough computers in inv.") return false end

  -- Floppies (they don't stack)
  if has_gps then
    local disk_slots = inv.find_all('ComputerCraft:disk')
    if #disk_slots < 4 then error("Not enough floppy disks in inv.") return false end
  end

  -- Drives and modems
  local drive_num   = 0
  local modem_num   = 0
  local per_slots = inv.find_all('ComputerCraft:CC-Peripheral')
  for k,slot in ipairs(per_slots) do
    local cnt = turtle.getItemCount( slot )
    local d   = turtle.getItemDetail(slot)
    if inv.isa_ccdrive(d) then drive_num = drive_num + cnt
      elseif inv.isa_ccmodem(d) then modem_num = modem_num + cnt
    end
  end
  if has_gps then
    if drive_num < 4 then error("Not enough disk drives in inv.") return false end
  end
  if modem_num < 4 then error("Not enough modems in inv.") return false end

  return true
end

function write_startup_file(fname, vec)
  local h = fs.open(fname, 'w')
  if not h then
    error("Got an error opening file "..fname)
    return false
  end
  h.writeLine( "shell.run( \"gps\", \"host\", "..vec.x..", "..vec.y..", "..vec.z.." )" )
  h.close()
  return true;
end


-- Main
local x,y,z = gps.locate(2) 
if x and y and z then
  print("We're in range of a GPS system.")
  has_gps = true
else
  print("We're not in range of a GPS system.")
end

if not check_inv() then
  error("We can't build the GPS without the ingredients.")
  return
end
print("Inventory checks out.")

for i=1,height do turtle.up() end
print("At height, starting to build GPS.")
place_gps()

print("Returning home again.")
for i=1,height do turtle.down() end   -- fly back down to start
turtle.turnLeft()                     -- face original direction


 -- vim: syntax=lua ts=2 sw=2
