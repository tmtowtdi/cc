
--dig_cube 2DRzRAR3 1478204554


--[[
    Still need to test this with odd rows and odd cols, and then with odd and even and then with
    even and odd.
--]]

local rv = shell.run("turn", "left")
if rv then
  shell.run("turn", "right")
else
  error("This device is not a turtle.")
  return false
end

local args   = {...}
function die_usage()
  print("---------------------------------------")
  print("bin/dig_cube [col] [,row] [,dep] [,hi]")
  print("")
  print("Excavate a cube of ground.")
  print("")
  print("col - Cols to dig.  Def 8.")
  print("row - Rows to dig.  Def 8.")
  print("dep - Depth to dig.  Def 100.")
  print("hi - Height to rise to before")
  print("  returning.  Def 70.")
  print("---------------------------------------")
end
if args[1] == "-h" then
    die_usage()
    return
end

if not os.loadAPI("lib/inv") then return end
if not os.loadAPI("lib/move") then return end
if not os.loadAPI("lib/settings") then return end

local cols    = tonumber(args[1]) or 8
local rows    = tonumber(args[2]) or 8
local depth   = tonumber(args[3]) or 100
local highest = tonumber(args[4]) or 70

if not move.has_home('home') or not move.has_box('box') then
  print("You must call both bin/find_box and.")
  print("bin/set_home before running this.")
  return
end


function dump_inv_and_return()
  local r  = vector.new( gps.locate(2) )
  local rd = move.d()

  if not move.return_to_box(highest, 'box') then
    if not r.x or not r.y or not r.z then
      --GPS system might must be out of range.  Fly up and try again.
      move.gotoY(highest, true)
      if not move.return_to_box(highest, 'box') then
        error("Bottom of pit was out of GPS range; can't return!")
        return false
      end
    end
  end

  if not move.dump_inv("dn") then
    error("Our dumping box is full.  Heading home.")
    return false
  end

  move.goto(r.x, r.y, r.z, highest)
  move.face(rd)
  return true
end

function dig_move_forward()
  local s,d = turtle.inspect()
  if (s and d.name == 'minecraft:bedrock') then
    error("Hit bedrock - done.")
    move.return_to_box(highest, 'box')
    move.dump_inv("dn")
    move.go_home(highest)
  end
  move.fd(1, true)
  if inv.all_slots_used() then inv.consolidate_all() end
  if inv.all_slots_used() then
    if not dump_inv_and_return() then
      print("Our inventory box is full.")
      move.go_home(highest)
      return false
    end
  end
  return true
end

function dig_move_down()
  local s,d = turtle.inspectDown()
  if (s and d.name == 'minecraft:bedrock') then
    error("Hit bedrock - done.")
    move.return_to_box(highest, 'box')
    move.dump_inv("dn")
    move.go_home(highest)
  end
  move.dn(1, true)
  if inv.all_slots_used() then inv.consolidate_all() end
  if inv.all_slots_used() then
    if not dump_inv_and_return() then
      print("Our inventory box is full.")
      move.go_home(highest)
      return false
    end
  end
  return true
end


local start = vector.new( gps.locate(2) )
local rdepth                 = start.y - depth
rows                         = rows - 1
local col_cnt                = 0
local curr_depth             = start.y
while curr_depth  >= rdepth do
  for i = 1,cols do
    for j = 1,rows do if not dig_move_forward() then return end end
    col_cnt = col_cnt + 1

    --[[
      Make sure we're actually where we think we should be or cowardly 
      bail out.
    --]]
    if move.test_gps() then
      local c = vector.new( gps.locate(2) )
      if c.x ~= move.get_x() or c.y ~= move.get_y() or c.z ~= move.get_z() then
        print("Shit I don't know how we got here.")
        print("Bailing back home.")
        move.return_to_box(highest)
        move.dump_inv("dn")
        move.go_home(highest)
        return
      end
    else
      error("GPS is off or we're out of range")
      move.return_to_box(highest)
      move.dump_inv("dn")
      move.go_home(highest)
      return
    end

    if col_cnt < cols then
      if col_cnt % 2 == 1 then
        move.r()
        if not dig_move_forward() then return end
        move.r()
      else
        move.l()
        if not dig_move_forward() then return end
        move.l()
      end
    else
      if col_cnt % 2 == 1 then move.l() move.l() else move.r() end
    end
  end

  col_cnt         = 0
  curr_depth      = curr_depth - 1
  if curr_depth > = rdepth then dig_move_down() end
end

move.return_to_box(highest)
move.dump_inv("dn")
move.go_home(highest)
print("Ready for next mission, boss!")

 -- vim: syntax=lua ts=2 sw=2
