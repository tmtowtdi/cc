
--xfer cLpwQi38 1478246104

local rv = shell.run("turn", "left")
if rv then
  shell.run("turn", "right")
else
  error("This device is not a turtle.")
  return false
end

local args   = {...}
function die_usage()
  print("---------------------------------------")
  print("bin/xfer [wait] [,high], [,src] [,trgt]")
  print("")
  print("Transfer items from src to trgt chest.")
  print("")
  print("wait - Between loops.  Def. 300.")
  print("high - Fly up this far.  Def. 70.")
  print("src - Name of src box.  Def. 'src'.")
  print("trgt - Name of trgt box.")
  print("  Def. 'target'.")
  print("---------------------------------------")
end
if args[1] == "-h" then
    die_usage()
    return
end

if not os.loadAPI("lib/move") then return end

local wait_time  = tonumber(args[1]) or 300
local highest    = tonumber(args[2]) or 70
local src_box    = args[3] or 'src'
local target_box = args[4] or 'target'

--[[
  Set a home point for the turtle
  > bin/set_home

  Find your source box (the one you're 
  pulling inventory from), then:
  > bin/find_box src

  Find your target box (the one you're 
  dumping inventory to), then:
  > bin/find_box target

  Now run this:
  > bin/xfer

  ...and this will go to src, pull 
  items from it, then go to target, 
  dump items into it, then return to 
  its home point and wait five minutes.  
  Lather rinse repeat.

  > bin xfer 100 70 box1 box2
  ...take from "box1", dump to "box2", 
  fly up to a Y of 70 between moves, 
  wait 100 seconds before repeating.
--]]

function do_suck()
  print("Going to "..src_box)
  move.return_to_box(highest, src_box)
  print("At "..src_box.."; sucking inv")
  for i=1,16 do
    turtle.select(i)
    turtle.suckDown()
  end
  print("Done sucking.  Giggity.")
end

function do_dump()
  print("Going to "..target_box)
  move.return_to_box(highest, target_box)
  print("At "..target_box.."; dumping inv")
  if move.dump_inv('dn') then
    print("Done dumping.")
    return true
  else
    return false
  end
end



--Sanity checks
if not move.has_home() then
  error("You must set a home point first") 
  return
end
if not move.has_box(src_box) or not move.has_box(target_box) then
  error("You must run bin/find_box for both your source and target boxes first.")
  return
end
if highest <= move.get_y() then
  error("Your 'fly-to' height is lower than your current height.  Derp.")
  return
end
for i=1,16 do
  if turtle.getItemCount(i) > 0 then
    print("Inventory not empty.  Dumping first.")
    if not do_dump() then
      print("Our target box is full!")
      print("Giving up and heading home.")
      move.go_home(highest)
      return
    end
    break
  end
end

--Start
while true do
  do_suck()
  if not do_dump() then
    print("Our target box is full!")
    print("Giving up and heading home.")
    move.go_home(highest)
    return
  end
  print("Heading home.")
  move.go_home(highest)
  print("I'm home. Sleeping for "..wait_time.." seconds.")
  for i=1,wait_time do sleep(1) write(".") end
  print("")
end


 -- vim: syntax=lua ts=2 sw=2
