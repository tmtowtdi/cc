
--move rpdxDz77 1478155922

os.loadAPI("lib/settings")

local loc      = vector.new()
local facing   = nil
local cardinal = {
    ['n'] = { ['right'] = 'e', ['left'] = 'w', ['around'] = 's' },
    ['s'] = { ['right'] = 'w', ['left'] = 'e', ['around'] = 'n' },
    ['e'] = { ['right'] = 's', ['left'] = 'n', ['around'] = 'w' },
    ['w'] = { ['right'] = 'n', ['left'] = 's', ['around'] = 'e' },
}


function init()
  if not test_gps() then return false end
  if not find_direction() then return false end
  sleep(0.25)
  return true
end

function get_x() return loc.x end
function get_y() return loc.y end
function get_z() return loc.z end

function a()
  facing = cardinal[facing]['around']
  turtle.turnLeft()
  return turtle.turnLeft()
end
function l()
  facing = cardinal[facing]['left']
  return turtle.turnLeft()
end
function r()
  facing = cardinal[facing]['right']
  return turtle.turnRight()
end

function face_n()
  local d = d()
  if d == 'e' then l() elseif d == 's' then a() elseif d == 'w' then r() end
  return true
end
function face_e()
  local d = d()
  if d == 'n' then r() elseif d == 's' then l() elseif d == 'w' then a() end
  return true
end
function face_s()
  local d = d()
  if d == 'n' then a() elseif d == 'e' then r() elseif d == 'w' then l() end
  return true
end
function face_w()
  local d = d()
  if d == 'n' then l() elseif d == 'e' then a() elseif d == 's' then r() end
  return true
end
function face(dir)
  if dir == 'n' then face_n() 
    elseif dir == 'e' then face_e() 
    elseif dir == 's' then face_s() 
    elseif dir == 'w' then face_w()
    else 
      error("Dir must be 'n', 's', 'e', or 'w'.")
      return false
  end
  return true
end

function d()
  if not facing then
    -- This _should_ never hit.
    if not test_gps() then return false end
    facing = find_direction()
  end
  return facing
end

function find_direction()
  local start   = vector.new( gps.locate(2) )
  local finish  = vector.new()
  local got_dir = false
  local turns   = 0

  while not got_dir do
    plot_blocked, data = turtle.inspect()
    if (plot_blocked and (data.name ~= 'minecraft:water' and data.name ~= 'minecraft:flowing_water' and data.name ~= "minecraft:lava" and data.name ~= "minecraft:flowing_lava") ) then
      turtle.turnRight()
      turns = turns + 1
      if turns>3 then
        error("I cannot move, so I can't determine direction.")
        return false
      end
    else
      if not turtle.forward() then error("I should have been able to move forward but I could not.") end
      finish = vector.new( gps.locate(2) )
      got_dir = true
      turtle.back()
    end
  end

  if finish.x ~= start.x then
    if finish.x > start.x then facing = 'e' else facing = 'w' end
  else
    if finish.z > start.z then facing = 's' else facing = 'n' end
  end

  -- Turn back the way we were originally facing
  for i = 1,turns do l() end
  return facing
end

function test_gps()
  -- DO NOT use a vector for this.
  local x, y, z = gps.locate(2)
  if x and y and z then return true else return false end
end

function go_home(height, name)
  local height = height or 100           -- a reasonable wag
  local name   = name or 'home'
  if not has_home(name) then
      error("You must run bin/set_home first.")
      return false
  end
  local hx     = settings.get(name .. '_x')
  local hy     = settings.get(name .. '_y')
  local hz     = settings.get(name .. '_z')
  goto(hx, hy, hz, height)
  return true
end

--[[
  Check if the user has run the 
  set_home or find_box scripts yet.
--]]
function has_home(name)
  local name = name or 'home'
  local hx     = settings.get(name..'_x')
  local hy     = settings.get(name..'_y')
  local hz     = settings.get(name..'_z')
  if not hx or not hy or not hz then return false end
  return true
end
function has_box(name)
  local name = name or 'box'
  local bx     = settings.get(name..'_x')
  local by     = settings.get(name..'_y')
  local bz     = settings.get(name..'_z')
  if not bx or not by or not bz then return false end
  return true
end  

function return_to_box(h, n)
    local h = h or 100               -- a fairly reasonable wag
    local n = n or 'box'
    local bx = settings.get(n..'_x')
    local by = settings.get(n..'_y')
    local bz = settings.get(n..'_z')
    if not has_box(n) then
        error("You must run bin/find_box first.")
        return false
    end
    goto(bx, by+1, bz, h)
    return true
end

function dump_inv(dir)
  local dir = dir or 'dn'
  local drop;

  if dir == 'fd' then drop = turtle.drop
    elseif dir == 'up' then drop = turtle.dropUp
    elseif dir == 'dn' then drop = turtle.dropDown
    else
      error("Direction '"..dir.."' is invalid.")
      return false
  end

  for i = 1,16 do
    turtle.select(i)
    local s, d = turtle.getItemDetail()
    if s then
        if not drop() then return false end
    end
  end
  return true
end

function up(cnt,force)
	local cnt   = cnt or 1
  local force = force or false
  local wait  = 0
	for i=1,cnt do
        while not turtle.up() do
            if wait == 5 then
                return i - 1
            end
            if force then
                turtle.digUp()
                if turtle.attackUp() then sleep(0.25) end
                turtle.attackUp()
            end
            wait = wait + 1
            --sleep(1)
		end
    loc.y = loc.y + 1
    end
	return cnt
end
function dn(cnt,force)
	local cnt   = cnt or 1
    local force = force or false
    local wait  = 0
	for i=1,cnt do
        while not turtle.down() do
            if wait == 5 then
                return i - 1
            end
            if force then
                turtle.digDown()
                if turtle.attackDown() then sleep(0.25) end
                turtle.attackDown()
            end
            wait = wait + 1
            --sleep(1)
		end
    end
    loc.y = loc.y - 1
	return cnt
end
function fd(cnt,force)
	local cnt   = cnt or 1
    local force = force or false
    local wait  = 0
	for i=1,cnt do
        while not turtle.forward() do
            if wait == 5 then
                return i - 1
            end
            if force then
                turtle.dig()
                if turtle.attack() then sleep(0.25) end
                turtle.attack()
            end
            wait = wait + 1
            --sleep(0.25)
		end
    end
    if facing == 'n' then loc.z = loc.z-1
        elseif facing == 'e' then loc.x = loc.x+1
        elseif facing == 's' then loc.z = loc.z+1
        elseif facing == 'w' then loc.x = loc.x-1
    end
	return cnt
end
function bk(cnt,force)
	local cnt   = cnt or 1
    local force = force or false
    local wait  = 0
	for i=1,cnt do
        while not turtle.back() do
            if wait == 5 then
                return i - 1
            end
            if force then
                a()
                turtle.dig()
                if turtle.attack() then sleep(0.25) end
                turtle.attack()
                a()
            end
            wait = wait + 1
            --sleep(1)
    	end
    end
    if facing == 'n' then loc.z = loc.z+1
        elseif facing == 'e' then loc.x = loc.x-1
        elseif facing == 's' then loc.z = loc.z-1
        elseif facing == 'w' then loc.x = loc.x+1
    end
	return cnt
end

function strafe_r(cnt,force) r() fd(cnt, force) l() end
function strafe_l(cnt,force) l() fd(cnt, force) r() end

function gotoX(toX,force)
    if toX == nil then error("No coordinate specified.",2) end
    local force = force or false
    if loc.x < toX then face_e() else face_w() end
    while loc.x ~= toX do fd(1,force) end
end
function gotoY(toY,force)
  toY = tonumber(toY)
  if toY == nil then error("No coordinate specified.",2) end
  local force = force or false
  if loc.y < toY then move = up elseif loc.y > toY then move = dn end
  while loc.y ~= toY do move(1,force) end
end
function gotoZ(toZ,force)
    if toZ == nil then error("No coordinate specified.",2) end
    local force = force or false
    if loc.z < toZ then face_s() else face_n() end
    while loc.z ~= toZ do fd(1, force) end
end
function goto(toX, toY, toZ, height, force)
    if height then gotoY(height, true) end
    gotoX(toX, force)
    gotoZ(toZ, force)
    gotoY(toY, force)
end

-- 230 72 -176


if not init() then
  error("We're out of GPS range!")
  return false
end

 -- vim: syntax=lua ts=2 sw=2
