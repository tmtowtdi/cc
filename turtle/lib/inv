
--inv bxF3p2yy

--[[
    Get the integer first slot containing item_name.

    item_name can be passed as either a FQ name or a "relative" name.
        wheat_seeds
        minecraft:wheat_seeds
    
    If passed a relative name, the first matching item's slot will be 
    returned, which could possibly return the wrong item in the case of items 
    added by multiple addons, eg:
        copper_ore
        industrycraft:copper_ore
        denseores:copper_ore

    ...so if you need a specific item from a specific addon, pass a FQ name.
--]]
function find(item_name)
  local simp_name = simplify_name(item_name)
  for i = 1,16 do 
    data = turtle.getItemDetail(i)
    if data then
      if simplify_name(data.name) == simp_name then
        if simp_name ~= item_name then    -- user passed FQ name
          if data.name == item_name then
            return i      -- FQ item name matches arg
          else
            return false  -- Simple names match, but FQ names do not.
          end
        else
          return i        -- Arg is simple, matches.  Close enough.
        end
      end
    end
  end
  return false
end

--[[
  Get a table of all slots containing the requested item_name.
  Same Simple/FQ naming rules as find().
--]]
function find_all(item_name)
  simp_name = simplify_name(item_name)
  local slots = {}
  for i = 1,16 do 
    data = turtle.getItemDetail(i)
    if data then
      if simplify_name(data.name) == simp_name then
        if simp_name ~= item_name then    -- user passed FQ name
          if data.name == item_name then
            table.insert(slots, i)        -- FQ name matches arg
          end
        else
          table.insert(slots, i)          -- Arg is simple, matches, close enough.
        end
      end
    end
  end
  return slots
end

--[[
  Finds all inventory slots containing item_name, and attempts to 
  consolidate those items.

  It's strongly recommended to pass in FQ names, especially for non-vanilla 
  items which may be duplicated by multiple addons.
  
    Before:
      ---------------------------
      |  20 dirt   |  empty     |
      |  10 dirt   |  50 dirt   |
      ---------------------------
    After
      ---------------------------
      |  64 dirt   |  empty     |
      |  16 dirt   |  empty     |
      ---------------------------
--]]
function consolidate(item_name)
  local slots = find_all(item_name)
  for i = #slots, 1, -1 do
    turtle.select(slots[i])
    for j = 1, (i-1) do
      if not turtle.transferTo(slots[j]) then break end       -- could not xfer to previous slot (it may be full)
      if not turtle.getItemCount(slots[j]) then break end     -- No items left in selected slot; it's empty.
    end
  end
end

-- Consolidates all items in the inventory
function consolidate_all()
    for i = 1,16 do
        local d = turtle.getItemDetail(i)
        consolidate(d.name)
    end
end

--[[
    Returns true if all inventory slots contain an item.
    Does not check if the item stacks are full, just if there's something in all slots.
--]]
function all_slots_used()
    for i = 1,16 do
        if not turtle.getItemDetail(i) then return false end
    end
    return true
end


--[[
  Given an item name, returns its simple item name.  If the passed name 
  was already simple, just returns it as-is.

    print simplify_name("dirt")             -- dirt
    print simplify_name("minecraft:dirt")   -- dirt
    print simplify_name("foobar:dirt")      -- dirt

--]]
function simplify_name(item_name)
  local new = string.gsub(item_name, "%w+:", "")
  return new
end

--[[
  Returns true if the passed item_name is FQ.
    if name_is_fq("dirt") then print("yes") else print("no") end              -- no
    if name_is_fq("minecraft:dirt") then print("yes") else print("no") end    -- yes
    if name_is_fq("othermod:dirt") then print("yes") else print("no") end     -- yes
--]]
function name_is_fq(item_name)
  if string.find(item_name,':') then return true else return false end
end

 -- vim: syntax=lua
