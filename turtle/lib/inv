
--inv bxF3p2yy 1478284027

function find(item_name)
  for i = 1,16 do 
    data = turtle.getItemDetail(i)
    if data then
      if name_is_fq(item_name) then
        if data.name == item_name then return i end
      else
        if simplify_name(data.name) == item_name then return i end
      end
    end
  end
  return false
end

function find_all(item_name)
  local slots  = {}
  for i = 1,16 do 
    data = turtle.getItemDetail(i)
    if data then
      if name_is_fq(item_name) then
        if data.name == item_name then table.insert(slots, i) end
      else
        if simplify_name(data.name) == item_name then table.insert(slots, i) end
      end
    end
  end
  return slots
end

function find_ccper_slot(type)
  local dmg;
  if type == 'drive' then dmg = 0
    elseif type == 'modem' then dmg = 1
    elseif type == 'monitor' then dmg = 2
    elseif type == 'printer' then dmg = 3
    else
      error("Invalid 'type' value: "..type..".")
      return false
  end
  local per_slots = inv.find_all('ComputerCraft:CC-Peripheral')
  for k,slot in ipairs(per_slots) do
    d = turtle.getItemDetail(slot)
    if d.damage == dmg then return slot end
  end
  return false
end

function isa_ccdrive(d)
  if d.name == 'ComputerCraft:CC-Peripheral' and d.damage == 0 then return true end
  return false
end
function isa_ccmodem(d)
  if d.name == 'ComputerCraft:CC-Peripheral' and d.damage == 1 then return true end
  return false
end
function isa_ccmonitor(d)
  if d.name == 'ComputerCraft:CC-Peripheral' and d.damage == 2 then return true end
  return false
end
function isa_ccprinter(d)
  if d.name == 'ComputerCraft:CC-Peripheral' and d.damage == 3 then return true end
  return false
end

function ccper_type(d)
  if d.name == 'ComputerCraft:CC-Peripheral' then
    if d.damage == 0 then return 'drive' end
    if d.damage == 1 then return 'modem' end
    if d.damage == 2 then return 'monitor' end
    if d.damage == 3 then return 'printer' end
  end
  return false
end

function consolidate(item_name, slots)
  local slots = slots or find_all(item_name)
  for i = #slots, 1, -1 do
    turtle.select(slots[i])
    for j = 1,(i-1) do
      turtle.transferTo(slots[j])
      if not turtle.getItemCount(slots[i]) then break end
    end
  end
end

function consolidate_all()
  local done  = {}
  local items = {} 
  --[[
    items = {
      name           = slots where it appears
      ---------------------------------------
      minecraft:dirt = {1, 3, 15},
      minecraft:coal = {2, 7, 13, 14}
    }

    find_all() has to iterate all 16 inv slots each time it's called.  If 
    we're holding 16 different item types, that's 256 iterations.
    Instead of forcing consolidate() to call find_all() for each different 
    item type in our inv, iterate all slots ourselves, gathering all of the 
    slots data in one go.
  --]]
  for i = 1,16 do
    local d = turtle.getItemDetail(i)
    if d.name then 
      if not items[d.name] then items[d.name] = {} end  --lua !autovivify
      table.insert( items[d.name], i )
    end
  end
  for name, slots in pairs(items) do consolidate(name, slots) end
end

function all_slots_used()
  for i = 1,16 do
    if not turtle.getItemDetail(i) then return false end
  end
  return true
end

function simplify_name(item_name)
  return string.gsub(item_name, "%w+:", "")
end

function name_is_fq(item_name)
  item_name = item_name or ''
  if string.find(item_name,':') then return true else return false end
end

return true

 -- vim: syntax=lua ts=2 sw=2
