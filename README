
TBD {{{{

    Ack for "CHECK"


    bin/dig_cube {#{{{
        - I added a GPS re-consult after each column is completed.
        - I also changed it to use go_home, dump_inv, return_to_box from the 
          move module.

        Needs tested
    }#}}}
    bin/xfer {#{{{
        Working pretty well, but it definitely needs a check on the "target" 
        box to see if it's full and go home and give up if so.
    }#}}}
    lib/inv {{{{
        Needs tested, particularly:
            consolidate()
    }}}}

    - Make sure ALL APIs return true on success, false on failure.

    - I'm starting to decide that there are GPS satellite machines, and then 
      there's everything else.  Computers and turtles will get the same code 
      -- keeping it separate is too much of a pain.

      So scripts that are turtle-only should start out with some sort of 
      sanity-check to ensure that the machine in question is actually a 
      turtle, and not a computer.  I'm not sure how to do that.

    - Add a die_usage() to all bin/ scripts.  See bin/go_home for eg.

    - Add 'bin/vers', which just prints out the current version (the epoch 
      created by pb.pl)

335 7 375


}}}}

Building Documentation {#{{{
    $ cd write_docs
    $ make html
    $ cd ../docs
    $ ./fix_underscores.pl      (stop forgetting this step, numbnuts.)

    Done.  Add, commit, push, and your online docs are updated.
}#}}}
Installing {#{{{
    - On a turtle {#{{{
            > pastebin get JQsniAQj install
            > install

        That's it.  Running the "install" script will install everything for 
        you.  You can now remove the install script if desired:
            > rm install
    }#}}}
    On a GPS satellite {{{{
        The full GPS system is 4 computers (regular is fine), and 4 wireless 
        modems.

        For each machine, place it next to a disk drive with my GPS disk in 
        it, and:
            > label set gps (Yes, all four machines can have the same label)
            > copy disk/startup .
        
        Place the machines per the diagram in the first post here:
            http://www.computercraft.info/forums2/index.php?/topic/3088-how-to-guide-gps-global-position-system/

        Once placed, edit each machine's startup script and enter its x, y, z 
        coordinates.  Yes, this is a massive pain in the ass.

        Add a modem to each machine, then run its startup script.
    }}}}
}#}}}
MC Cardinal Directions {#{{{
    X is east/west
    Z is north/south    (for whatever stupid fucked-up reason)
    Y is up/down        (for whatever stupid fucked-up reason)


                   N       
                        
                        
                   -5       
                           
         W     -5  0  5     E           X axis
                        
                   5       
                        
                        
                   S       


                        
                   Z

                   a
                   x
                   i
                   s


    Yes, moving North goes DOWN on the z axis for whatever stupid fucked-up 
    reason.
}#}}}
Why Pastebin instead of Github {#{{{
    
    I tried both and ended up using Pastebin and my own custom uploader.

    Pastebin
        Pros:
            - There's already a pastebin script on all computers and turtles, 
              so you don't have to do through any hassle getting it there.
            - When you edit a pastebin paste, it's available immediately.
                - Edit via the website, switch to MC and pull it right away, 
                  and you _did_ just pull the edited paste.
        Cons:
            - Editing code is a pain.  Edit in your editor, Ctrl-A, Ctrl-C to 
              copy it into the clipboard, switch to browser, find the paste, 
              hit Edit button, Ctrl-A, Ctrl-V to paste your new code, scroll 
              down to find the submit button.
                - And at least 20% of the time, accidentally hit Ctrl-C on the 
                  old code instead of Ctrl-V.  Blarg.
                - This "con" is mostly nullified by the existence of my custom 
                  pastebin file uploader (pb.pl).
            - It's not github.

        Github
            Pros:
                - It's github.
                - I'm already set up to use github and I'm comfortable with it 
                  and it's handy and it's github.
            Cons:
                - There's no git script on any machine in MC by default; you 
                  have to find one online (they do exist) and get it into the 
                  game, which is a pain.
                - The git scripts pull from "raw.githubusercontent.com" to 
                  pull just the raw file (fine).
                    - But github raw CACHES its content.  I've read it's for a 
                      minute, but it sure as hell seems like longer than that.
                    - However long the cache lasts, if you're trying to edit, 
                      upload, download, run, repeat, you'll find that the 
                      "download" part of that process holds you up because it 
                      keeps downloading old versions.
                    - This caching issue is becoming a deal-breaker.


}#}}}
pb.pl and Pastebin API {#{{{

    pb.pl {#{{{
        
        pb.pl updates all of my pastes on pastebin.com.  Just run the script 
        any time you make an edit here.

        It looks for a comment at the top of the script like this:
                    --scriptnameANY OTHER TEXT CAN FOLLOW
                    -- scriptnameANY OTHER TEXT CAN FOLLOW
            If it finds such a comment, it changes that line to:
                    --scriptname pastebin_hash_value epoch
            This is to make it easier for you to tell, in-game, that you've 
            actually downloaded the latest version (check the epoch value) 
            after you've run bin/get_all.

        
        If you create a new script or lib to add, first create it manually on 
        pastebin.com, then edit pb.pl following the existing examples.  From 
        then on, all calls to pb.pl will update your new script.

    }#}}}
    Pastebin API funk {#{{{
        
        The Pastebin API is largely well-done and easy to deal with.

        However, the API is missing an edit method.

        I do have an edit() method in my Paste module, but it's using 
        WWW::Mechanize to:
            - scrape the login form and log in on the web
            - get the appropriate edit form, fill it out and submit it.


        The pastebin website is set up such that you can only have one web 
        login active at a time.  Test by logging in with one browser, then 
        switching to another browser and logging in there.  Return to the 
        first browser and refresh the page and you'll see that it's been 
        logged out.

        Since my edit() method is having to perform a web login, this means 
        that, if you've got a pastebin.com tab open in your browser when you 
        call WWW::Pastebin::Paste::edit(), your browser's session will be 
        invalidated and you'll have to log in again there.

        Not the end of the world, but a bit of a pain.

    }#}}}

}#}}}

turtle/ {#{{{
    This docu really needs to end up somewhere more visible.
    
    bin {{{{
        dig_cube {{{{
            Quarrying script.

            Digs a rectangle of a specified length, width, and depth, returning 
            its inv to a specified box.

            SETUP
            - Figure out where your box is
                - This is where the turtle will dump out its inventory.
                    - It should be a double box, even if it's attached to a hopper 
                    (the turtle dumps its inv faster than a hopper can drain, 
                    and the turtle's inv is larger than a small box.)
                - Create a file in etc/ to contain your coords.  The file's 
                contents must look like this:
                            x: 123
                            y: 456
                            z: -789
                ...using the exact coords of your box.
                - The turtle will fly back to the box from above and come to rest 
                one space /above/ the box, so be sure the path above is clear.
            - Edit the script.
                - Set your desired cols, rows, and depth, all relative to the 
                start point of the turtle.
                - "highest" is the Y coord that the turtle will fly up to before 
                heading back to the box.  It should be high enough to not only 
                fly out of your quarry, but also to avoid any obstacles (trees, 
                mountains, houses, whatever) between your quarry and your 
                dumping box.
                - Set the name of the file containing your box coords.

        }}}}
        get_all {{{{
            Downloads all my scripts from Pastebin.

            Just a shell script (more or less) that calls get_script once per 
            script to be downloaded.
        }}}}
        get_script {{{{
            Downloads a single script from pastebin.  See get_all for example 
            usage.
        }}}}
        harvest_wheat {{{{
            TBD
                - Right now, harvest_wheat has the start point hard-coded.  Instead, the 
                turtle should record its position when the program is started and assume 
                that's the correct starting point
                    - This assumes the user places the turtle correctly
                    - But it also allows the user to move the turtle to a different farm.

                - At end, find a chest and
                    - dump wheat from inv into chest
                    - check own fuel level.  if too low, get coal from chest and refuel
                    - check own seeds level.  If too low, get seeds from chest

                - Instead of assuming a farm is two double-columns of crops, allow an arg 
                to declare how many double-columns there are (I can see a villager farm 
                that consists of 3 double-columns).

        }}}}
    }}}}
    lib {{{{
        harvest {{{{
            library used by harvest_wheat script.  My best guess is that this 
            might have some good ideas, but as a whole it's not real useful as a 
            general-purpose library.
        }}}}
        move {{{{
            Movement-related library.  Will probably be included in every turtle 
            script I create.
        }}}}
        inv {{{{
            Turtle inventory utilities.  Will probably be used in every turtle 
            script.
        }}}}
        
    }}}}

}#}}}

